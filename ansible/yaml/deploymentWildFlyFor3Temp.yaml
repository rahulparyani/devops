---
- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Checking RTD
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"
    script: /etc/ansible/roles/script/checkRTD.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server1 }} {{ app }} {{ env }} {{ dc }} {{ staticFolder }} {{ rtdFolder }}  {{ rtdPath }} {{ rtdPathFolder }} "wildFly"
    register: CheckingRTDStatus
    args:
     executable: python3
  - name: CheckingRTDStatusOutput
    debug:
     msg: "{{ CheckingRTDStatus.stdout_lines }}"
  - name: count
    debug:
     msg: "{{ CheckingRTDStatus.stdout.find('Go for Deployments') }}"

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: First Server
    delegate_to: "{{ server1 }}"
    become: yes
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server1 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "false" {{ prvfle }}
    register: FirstServerStatus
    args:
     executable: python3
    when: "{{ CheckingRTDStatus.stdout.find('Go for Deployments') != -1 }} and {{ server1 is defined }}"
  - name: FirstServerOutPut
    debug:
     msg: "{{ FirstServerStatus.stdout_lines }}"
    when: "{{ FirstServerStatus.stdout is defined }}"
  - name: count
    debug:
     msg: "{{ FirstServerStatus.stdout.find('Go for next instance') }}"
    when: "{{ FirstServerStatus.stdout is defined }}"

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Second Server
    delegate_to: "{{ server2 }}"
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server2 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: SecondServerStatus
    args:
     executable: python3
    when: "{{ FirstServerStatus.stdout.find('Go for next instance') != -1 }} and {{ server2 is defined }}"
    notify:
    - SecondServerOutPut
  handlers:
  - name: SecondServerOutPut
    debug:
     msg: "{{ SecondServerStatus.stdout_lines }}"
  - name: count
    debug:
     msg: "{{ SecondServerStatus.stdout.find('Go for next instance') }}"
     
- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Third Server
    delegate_to: "{{ server3 }}"
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server3 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: ThirdServerStatus
    args:
     executable: python3
    when: "{{ SecondServerStatus.stdout.find('Go for next instance') != -1 }} and {{ server3 is defined }}"
    notify:
    - ThirdServerOutPut
  handlers:
  - name: ThirdServerOutPut
    debug:
     msg: "{{ ThirdServerStatus.stdout_lines }}"
  - name: count
    debug:
     msg: "{{ ThirdServerStatus.stdout.find('Go for next instance') }}"

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for One Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ FirstServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ FirstServerStatus.stdout is defined }} and {{ SecondServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Two Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ FirstServerStatus.stdout }}" "{{ SecondServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ FirstServerStatus.stdout is defined }} and {{ SecondServerStatus.stdout is defined }} and {{ ThirdServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Three Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ FirstServerStatus.stdout }}" "{{ SecondServerStatus.stdout }}" "{{ ThirdServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ FirstServerStatus.stdout is defined }} and {{ SecondServerStatus.stdout is defined }} and {{ ThirdServerStatus.stdout is defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Build Status for One Server
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"
    script: /etc/ansible/roles/script/buildStatusFY.py
    args:
     executable: python3
    when: "{{ FirstServerStatus.stdout.find('Go for next instance') == -1 }}"

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Build Status for Two Server
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"
    script: /etc/ansible/roles/script/buildStatusFY.py
    args:
     executable: python3
    when: "{{ SecondServerStatus.stdout.find('Go for next instance') == -1  }}"

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Build Status for Three Server
    become: yes
    ignore_errors: "{{ ansible_check_mode }}"
    script: /etc/ansible/roles/script/buildStatusFY.py
    args:
     executable: python3
    when: "{{ ThirdServerStatus.stdout.find('Go for next instance') == -1 }}"