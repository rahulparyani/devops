---
- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Checking RTD
    become: yes
    script: /etc/ansible/roles/script/checkRTD.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server1 }} {{ app }} {{ env }} {{ dc }} {{ staticFolder }} {{ rtdFolder }}  {{ rtdPath }} {{ rtdPathFolder }} "wildFly"
    register: CheckingRTDStatus
    args:
     executable: python3
  - name: CheckingRTDStatusOutput
    debug:
     msg: "{{ CheckingRTDStatus.stdout_lines }}"
  - name: count
    debug:
     msg: "{{ CheckingRTDStatus.stdout.find('Go for Deployments') }}"

- hosts: "{{ server1 }}"
  tasks:
  - name: First Server
    become: yes
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server1 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "false" {{ prvfle }}
    register: FirstServerStatus
    args:
     executable: python3
    when: "{{ hostvars[AnsibleServer].CheckingRTDStatus.stdout.find('Go for Deployments') != -1 }}"
  - name: FirstServerOutPut
    debug:
     msg: "{{ FirstServerStatus.stdout_lines }}"
    when: "{{ FirstServerStatus.stdout is defined }}"
  - name: count
    debug:
     msg: "{{ FirstServerStatus.stdout.find('Go for next instance') }}"
    when: "{{ FirstServerStatus.stdout is defined }}"

- hosts: "{{ server2 }}"
  tasks:
  - name: Second Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server2 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: SecondServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - SecondServerOutPut

  handlers:
  - name: SecondServerOutPut
    debug:
     msg: "{{ SecondServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ SecondServerStatus.stdout.find('Go for next instance') }}"
     
- hosts: "{{ server3 }}"
  tasks:
  - name: Third Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server3 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: ThirdServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server2].SecondServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - ThirdServerOutPut

  handlers:
  - name: ThirdServerOutPut
    debug:
     msg: "{{ ThirdServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ ThirdServerStatus.stdout.find('Go for next instance') }}"

- hosts: "{{ server4 }}"
  tasks:
  - name: Fourth Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server4 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: FourthServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server3].ThirdServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - FourthServerOutPut

  handlers:
  - name: FourthServerOutPut
    debug:
     msg: "{{ FourthServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ FourthServerStatus.stdout.find('Go for next instance') }}"

- hosts: "{{ server5 }}"
  tasks:
  - name: Fifth Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server5 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: FifthServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server4].FourthServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - FifthServerOutPut

  handlers:
  - name: FifthServerOutPut
    debug:
     msg: "{{ FifthServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ FifthServerStatus.stdout.find('Go for next instance') }}"

- hosts: "{{ server6 }}"
  tasks:
  - name: Sixth Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server6 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: SixthServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server5].FifthServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - SixthServerOutPut

  handlers:
  - name: SixthServerOutPut
    debug:
     msg: "{{ SixthServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ SixthServerStatus.stdout.find('Go for next instance') }}"
     
- hosts: "{{ server7 }}"
  tasks:
  - name: Seventh Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server7 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: SeventhServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server6].SixthServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - SeventhServerOutPut

  handlers:
  - name: SeventhServerOutPut
    debug:
     msg: "{{ SeventhServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ SeventhServerStatus.stdout.find('Go for next instance') }}"

- hosts: "{{ server8 }}"
  tasks:
  - name: Eighth Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server8 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: EighthServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server7].SeventhServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - EighthServerOutPut

  handlers:
  - name: EighthServerOutPut
    debug:
     msg: "{{ EighthServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ EighthServerStatus.stdout.find('Go for next instance') }}"
     
- hosts: "{{ server9 }}"
  tasks:
  - name: Ninth Server
    become: yes  
    script: /etc/ansible/roles/script/deploymentWildfly.py {{ Restart }} {{ Conf }} {{ Configuration }} {{ Lib }} {{ Properties }} {{ Ear }} {{ Static }} {{ DynamicJars }} {{ server9 }} {{ app }} {{ env }} {{ serviceName }} {{ dc }} {{ staticFolder }} {{ rtdFolder }} {{ rtdPath }} {{ earName }} "true" {{ prvfle }}
    register: NinthServerStatus
    ignore_errors: True
    args:
     executable: python3
    when: "{{ hostvars[server8].EighthServerStatus.stdout.find('Go for next instance') != -1 }}"
    notify:
    - NinthServerOutPut

  handlers:
  - name: NinthServerOutPut
    debug:
     msg: "{{ NinthServerStatus.stdout_lines }}"

  - name: count
    debug:
     msg: "{{ NinthServerStatus.stdout.find('Go for next instance') }}"

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for One Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Two Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Three Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Four Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}" "{{ hostvars[server4].FourthServerStatus.stdout}}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is defined }} and {{ hostvars[server5].FifthServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Five Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}" "{{ hostvars[server4].FourthServerStatus.stdout }}" "{{ hostvars[server5].FifthServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is defined }} and {{ hostvars[server5].FifthServerStatus.stdout is defined }} and {{ hostvars[server6].SixthServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Six Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}" "{{ hostvars[server4].FourthServerStatus.stdout }}" "{{ hostvars[server5].FifthServerStatus.stdout }}" "{{ hostvars[server6].SixthServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is defined }} and {{ hostvars[server5].FifthServerStatus.stdout is defined }} and {{ hostvars[server6].SixthServerStatus.stdout is defined }} and {{ hostvars[server7].SeventhServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Seven Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}" "{{ hostvars[server4].FourthServerStatus.stdout }}" "{{ hostvars[server5].FifthServerStatus.stdout }}" "{{ hostvars[server6].SixthServerStatus.stdout }}" "{{ hostvars[server7].SeventhServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is defined }} and {{ hostvars[server5].FifthServerStatus.stdout is defined }} and {{ hostvars[server6].SixthServerStatus.stdout is defined }} and {{ hostvars[server7].SeventhServerStatus.stdout is defined }} and {{ hostvars[server8].EighthServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: EmailNotification for Eight Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}" "{{ hostvars[server4].FourthServerStatus.stdout }}" "{{ hostvars[server5].FifthServerStatus.stdout }}" "{{ hostvars[server6].SixthServerStatus.stdout }}" "{{ hostvars[server7].SeventhServerStatus.stdout }}" "{{ hostvars[server8].EighthServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is defined }} and {{ hostvars[server5].FifthServerStatus.stdout is defined }} and {{ hostvars[server6].SixthServerStatus.stdout is defined }} and {{ hostvars[server7].SeventhServerStatus.stdout is defined }} and {{ hostvars[server8].EighthServerStatus.stdout is defined }} and {{ hostvars[server9].NinthServerStatus.stdout is not defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"    
  tasks:
  - name: EmailNotification for Nine Server
    become: yes
    script: /etc/ansible/roles/script/emailNotification.py {{ receivers }} {{ smtpserver }} "{{ hostvars[server1].FirstServerStatus.stdout }}" "{{ hostvars[server2].SecondServerStatus.stdout }}" "{{ hostvars[server3].ThirdServerStatus.stdout }}" "{{ hostvars[server4].FourthServerStatus.stdout }}" "{{ hostvars[server5].FifthServerStatus.stdout }}" "{{ hostvars[server6].SixthServerStatus.stdout }}" "{{ hostvars[server7].SeventhServerStatus.stdout }}" "{{ hostvars[server8].EighthServerStatus.stdout }}" "{{ hostvars[server9].NinthServerStatus.stdout }}"
    register: EmailOutput
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout is defined }} and {{ hostvars[server2].SecondServerStatus.stdout is defined }} and {{ hostvars[server3].ThirdServerStatus.stdout is defined }} and {{ hostvars[server4].FourthServerStatus.stdout is defined }} and {{ hostvars[server5].FifthServerStatus.stdout is defined }} and {{ hostvars[server6].SixthServerStatus.stdout is defined }} and {{ hostvars[server7].SeventhServerStatus.stdout is defined }} and {{ hostvars[server8].EighthServerStatus.stdout is defined }} and {{ hostvars[server9].NinthServerStatus.stdout is defined }}"
    notify:
    - OutputOfEmailNotification
  handlers:
  - name: OutputOfEmailNotification
    debug:
     msg: " {{ EmailOutput.stdout_lines }} "

- hosts: "{{ AnsibleServer }}"
  tasks:
  - name: Build Status
    become: yes
    script: /etc/ansible/roles/script/buildStatusFY.py
    args:
     executable: python3
    when: "{{ hostvars[server1].FirstServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server2].SecondServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server3].ThirdServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server4].FourthServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server5].FifthServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server6].SixthServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server7].SeventhServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server8].EighthServerStatus.stdout.find('Go for next instance') == -1 }} or {{ hostvars[server9].NinthServerStatus.stdout.find('Go for next instance') == -1 }}"